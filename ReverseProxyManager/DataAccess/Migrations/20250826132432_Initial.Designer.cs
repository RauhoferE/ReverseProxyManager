// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ReverseProxyDbContext))]
    [Migration("20250826132432_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.18");

            modelBuilder.Entity("Core.Entities.CertificateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FileAttached")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUpToDate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Issuer")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ServerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidNotAfter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ValidNotBefore")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Core.Entities.ServerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUpToDate")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawSettings")
                        .HasColumnType("TEXT");

                    b.Property<bool>("RedirectsToHttps")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Target")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<long?>("TargetPort")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsesHttp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("Core.Entities.CertificateEntity", b =>
                {
                    b.HasOne("Core.Entities.ServerEntity", "ServerEntity")
                        .WithOne("Certificate")
                        .HasForeignKey("Core.Entities.CertificateEntity", "ServerId");

                    b.Navigation("ServerEntity");
                });

            modelBuilder.Entity("Core.Entities.ServerEntity", b =>
                {
                    b.Navigation("Certificate");
                });
#pragma warning restore 612, 618
        }
    }
}
